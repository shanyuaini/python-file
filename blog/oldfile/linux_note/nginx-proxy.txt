proxy模块
代理只是帮用户传达请求,传送响应
缓存才能加速访问

反向代理:私有代理,代理一个网站
公共代理,代理众多网站

	替服务器接受用户请求,
	上游服务器,代理后端正真处理用户数据的服务器
	nginx反向代理服务器的特性由于客户端和代理,代理和上游服务器网络可能不同,(上游服务器到nginx可能是本地网络,传输很快)
	当客户端发起请求时,nginx会等待客户端传输所有数据后上传给后端服务器.先将数据传到本地缓存.
	当上游服务器响应时,nginx会一边接受数据一边发送给客户端,将没来得及发送的缓存到本地.这样能够减轻上游服务器的压力
	nginx的两种用途
	1,静态内容的web服务器.动态后端php用apache和php,java 用tomcat
	2,做反向代理

proxy_pass http://uri 必须要有http这样的协议名称
可以对整站代理,也可以对指定目录进行代理
Nginx通过proxy模块实现反向代理功能。在作为web反向代理服务器时，nginx负责接收客户请求，并能够根据URI、客户端参数或其它的处理逻辑将用户请求调度至上游服务器上(upstream server)。nginx在实现反向代理功能时的最重要指令为proxy_pass，它能够将location定义的某URI代理至指定的上游服务器(组)上。如下面的示例中，location的/uri将被替换为上游服务器上的/newuri。

	location /uri {
		proxy_pass http://www.magedu.com:8080/newuri;
	}
	server{
	listen 80;
	server_name www.c.com
	location /{
		proxy_pass http://172.16.100.9/
	}
	}
	
	
	server{  
	listen 80;
	server_name www.c.com
	location /admin{
		proxy_pass http://172.16.100.9/;       #此时172.16.100.9/必须要加/,这是表示用/代替/admin ,不带/时表示访问172.16.100.9/admin
	}
	}

不过，这种处理机制中有两个例外。一个是如果location的URI是通过模式匹配定义的，其URI将直接被传递至上游服务器，而不能为其指定转换的另一个URI。例如下面示例中的/forum将被代理为http://www.magedu.com/forum。

	location ~ ^/bbs {
		proxy_pass http://www.magedu.com;   #此时一定不能给路径.
	}

第二个例外是，如果在loation中使用的URL重定向，那么nginx将使用重定向后的URI处理请求，而不再考虑上游服务器上定义的URI。如下面所示的例子中，传送给上游服务器的URI为/index.php?page=<match>，而不是/index。

	location / {
		rewrite /(.*)$ /index.php?page=$1 break;
		proxy_pass http://localhost:8080/index;
	}
	
	1,proxy_connect_timeout：nginx将一个请求发送至upstream server之前等待的最大时长；
	2,proxy_cookie_domain：将upstream server通过Set-Cookie首部设定的domain属性修改为指定的值，其值可以为一个字符串、正则表达式的模式或一个引用的变量；
			client-->proxy-->server proxy和server的域名不一致时,nginx将域名改为一直的传输
	3,proxy_cookie_path: 将upstream server通过Set-Cookie首部设定的path属性修改为指定的值，其值可以为一个字符串、正则表达式的模式或一个引用的变量；
	4,proxy_hide_header：设定发送给客户端的报文中需要隐藏的首部；
				proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	5,proxy_pass：指定将请求代理至upstream server的URL路径；
	6,proxy_set_header：由于访问后端服务器时,nginx是以自身的身份去请求后端服务器,此时将发送至upsream 7,server的报文的某首部进行重写；加上nginx代理的信息,以便后端服务器能够正确判定原始客户端的信息.需要在日志格式中加%{X-Real-IP}i参数,来抓取真实客户端ip(常用)
	8,proxy_redirect [default(默认)|off(关闭)|redirect(转发)|replacement(替换)]：重写location并刷新从upstream 9,server收到的报文的首部；当上游服务器返回的响应是重定向或刷新请求时,会重新设定http首部的location或refresh
		用户请求的http://www.magedu.com/images/some/path, 后端返回的http://localhot:8080/imgs/some/path,nginx代理会自动把后端的路劲重写成用户的
		proxy_redirect http://localhost:8080/imgs http://www.magedu.com/images
	10,proxy_send_timeout：在连接断开之前两次发送至upstream server的写操作的最大间隔时长；默认15秒
	11,proxy_read_timeout：在连接断开之前两次从接收upstream server接收读操作的最大间隔时长；默认15秒
	12,add_header 设定发送给客户端的报文中显示的首部
		add_header X-Via $server_addr
		如下面的一个示例：
		proxy_redirect off;

		client_max_body_size 10m;
		client_body_buffer_size 128k;
		proxy_connect_timeout 30;
		proxy_send_timeout 15;
		proxy_read_timeout 15;


		
upstream模块 

注意:只能放在http段中,各server只能直接使用IP端口或主机名,不能加http这样的协议名称

与proxy模块结合使用的模块中，最常用的当属upstream模块。upstream模块可定义一个新的上下文，它包含了一组upstream服务器，这些服务器可能被赋予了不同的权重、不同的类型甚至可以基于维护等原因被标记为down。



		
upstream模块常用的指令有：
	ip_hash：基于客户端IP地址完成请求的分发，它可以保证来自于同一个客户端的请求始终被转发至同一个upstream服务器；
	keepalive：每个worker进程为发送到upstream服务器的连接所缓存的个数；
	least_conn：最少连接调度算法；
	server：定义一个upstream服务器的地址，还可包括一系列可选参数，如：
	server address [parameters]
		parameters有下面这些
		weight：权重；
		max_fails：最大失败连接次数，失败连接的超时时长由fail_timeout指定；默认为1,(健康检测,一旦发现服务器失败,就转到健康的服务器)
		fail_timeout：等待请求的目标服务器发送响应的时长；失败尝试超时时长,默认为10s
		backup：用于fallback的目的，所有服务均故障时才启动此服务器；(所有服务器都坏掉了,就给用户错误页面,任何一个服务器上线,此服务器都不上线,ip_hash中没有用)
		down：手动标记其不再处理任何请求；手动标记为下线(只有ip_hash算法有意义)

				例如：
					upstream backend {
					  server www.magedu.com weight=3;
					  server 172.16.100.10:8080  weight=2  max_fails=3  fail_timeout=30s;
					}

	match name {...},用于http.(1.5)
		status,资源响应状态码
		header,
		例如
			match webcheck{
				status 200;
				header content-type text/html
				body ~"OK"
			}
					
	health_check [interval=time] [fails=number] [passes=number] [uri=uri] [match=name](1.5)
		用于server中的location
		例如下面示例中的/forum将被代理为http
		server {
		listen 80
		server_name www.c.net
		location /{
			proxy_pass http://webserver;
			health_check uri=/.health.html match=webcheck
		}
		}
	ip_hash:用在upstream,把同一用户的请求分配到同一服务器,	
	least_conn：最少连接调度算法；也用在upstream
	sticky: 实现cookie绑定也用在upstream中(1.5版本使用)
		sticky cookie srv_id expires=1h domain=.example.com path=/;

upstream模块的负载均衡算法主要有三种，轮调(round-robin)、ip哈希(ip_hash)和最少连接(least_conn)三种。

此外，upstream模块也能为非http类的应用实现负载均衡，如下面的示例定义了nginx为memcached服务实现负载均衡之目的。

	upstream memcachesrvs {
		server 172.16.100.6:11211;
		server 172.16.100.7:11211;
	}
	
	server {
		location / {
		set $memcached_key "$uri?$args";
		memcached_pass memcachesrvs;
		error_page 404 = @fallback;
		}
	
		location @fallback {
	   		 proxy_pass http://127.0.0.1:8080;
		}
	}
	
	upstream变量
		$upstream_addr  保留这次转发时上游服务器的信息
		$upstream_cache_status  保留这次转发时缓存的信息
		$upstream_response_length  
		$upstream_response_time    
		$upstream_status    上游服务器状态码
		$upstream_http_...	保留这次转发时上游服务器首部,可以引用
	
	动静分离,把PHP
	lnmp nginx服务器自己提供静态内容服务,对php的请求通过FastCGI代理至php-fpm服务器
	

配置示例
		server {
				listen       80;
				server_name  www.magedu.com;
				add_header X-Via $server_addr;  

				location / {
					root   html;
					index  index.html index.htm;
					if ($request_method ~* "PUT") {
						proxy_pass http://172.16.100.12;
						break;
					}
				}

				location /bbs {
					proxy_pass http://172.16.100.11/;
				}
		} 

		此例中，对http://www.magedu.com/bbs/的请求将被转发至http://172.16.100.11/这个URL，切记最后的/不应该省去；而/匹配的URL中请求方法为“PUT”时，将被转发至http://172.16.100.12/这个URL。

		另外，add_header用于让nginx在响应给用户的报文中构造自定义首部，其使用格式为“add_header NAME VALUE”。

		可以使用curl命令对配置好的服务进行请求，以验正其效果。如：
		# curl -I http://www.magedu.com/bbs/
		HTTP/1.1 200 OK
		Server: nginx/1.4.1
		Date: Tue, 14 May 2013 10:19:10 GMT
		Content-Type: text/html; charset=UTF-8
		Content-Length: 15
		Connection: keep-alive
		Last-Modified: Tue, 30 Apr 2013 09:34:09 GMT
		ETag: "186e9f-f-b4076640"
		X-Via: 172.16.100.107
		Accept-Ranges: bytes


		在后端服务器172.16.100.12上装载dav模块，并开放其dav功能，而后验正文件上传效果。开放dav功能的方法如下：

		首先启用如下两个模块：
		LoadModule dav_module modules/mod_dav.so
		LoadModule dav_fs_module modules/mod_dav_fs.so

		而后配置相应主机的目录如下所示，关键是其中的dav一行。
		<Directory "/var/www/html">
			dav on
			Options Indexes FollowSymLinks
			Order allow,deny
			Allow from all
		</Directory>

		接着尝试访问代理服务器：
		# curl -I -T /etc/inittab http://www.magedu.com/
		HTTP/1.1 100 Continue

		HTTP/1.1 201 Created
		Server: nginx/1.4.1
		Date: Tue, 14 May 2013 10:20:15 GMT
		Content-Type: text/html; charset=UTF-8
		Content-Length: 261
		Location: http://172.16.100.107/inittab
		Connection: keep-alive
		X-Via: 172.16.100.107

		<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
		<html><head>
		<title>201 Created</title>
		</head><body>
		<h1>Created</h1>
		<p>Resource /inittab has been created.</p>
		<hr />
		<address>Apache/2.2.3 (Red Hat) Server at 172.16.100.12 Port 80</address>
		</body></html>


		5.2 启用缓存
		http {
			include       mime.types;
			default_type  application/octet-stream;
			sendfile        on;
			keepalive_timeout  65;

			proxy_cache_path /nginx/cache/first  levels=1:2   keys_zone=first:10m max_size=512m;

			server {
				listen       80;
				server_name  www.magedu.com;

				location / {
					root   html;
					index  index.html index.htm;
					if ($request_method ~* "PUT") {
						proxy_pass http://172.16.100.12;
						break;
					}
				}

				location /bbs {
					proxy_pass http://172.16.100.11/;
					proxy_cache first;
					proxy_cache_valid 200 1d;
					proxy_cache_valid 301 302 10m;
					proxy_cache_valid any 1m;
				}
			} 
		}


		5.3 使用upstream

		5.3.1 不启用缓存

		http {
			include       mime.types;
			default_type  application/octet-stream;
			sendfile        on;
			keepalive_timeout  65;
		 
			upstream websrv {
				server 172.16.100.11 weight=1;
				server 172.16.100.12 weight=1;
				server 127.0.0.1:8080 backup;
			}
			server {
				listen       80;
				server_name  www.magedu.com;

				add_header X-Via $server_addr;

				location / {
					proxy_pass http://websrv;
					index  index.html index.htm;

					if ($request_method ~* "PUT") {
						proxy_pass http://172.16.100.12;
						break;
					}
				}
				error_page   500 502 503 504  /50x.html;
				location = /50x.html {
					root   html;
				}
			}

			server {
				listen 8080;
				server_name localhost;
				root /nginx/htdocs;
				index index.html;
			}
		}

		测试效果：默认情况下，nginx对定义了权重的upstream服务器使用加权轮调的方法调度访问，因此，其多次访问应该由不同的服务器进行响应。如下所示。

		# curl  http://172.16.100.107/
		RS2.magedu.com

		# curl  http://172.16.100.107/
		RS1.magedu.com

		根据上面的配置，如果172.16.100.11和172.16.100.12两个upstream服务器均宕机时，将由本地监听在8080端口的虚拟主机进行响应。
		# curl  http://172.16.100.107/
		Sorry...


		5.3.2 为upstream启用缓存

		http {
			include       mime.types;
			default_type  application/octet-stream;
			sendfile        on;
			keepalive_timeout  65;
		 
			proxy_cache_path /nginx/cache/first  levels=1:2   keys_zone=first:10m max_size=512m;
		 
			upstream websrv {
				server 172.16.100.11 weight=1;
				server 172.16.100.12 weight=1;
				server 127.0.0.1:8080 backup;
			}
			server {
				listen       80;
				server_name  www.magedu.com;

				add_header X-Via $server_addr;
				add_header X-Cache-Status $upstream_cache_status;

				location / {
					proxy_pass http://websrv;
					proxy_cache first;
					proxy_cache_valid 200 1d;
					proxy_cache_valid 301 302 10m;
					proxy_cache_valid any 1m;
					index  index.html index.htm;

					if ($request_method ~* "PUT") {
						proxy_pass http://172.16.100.12;
						break;
					}
				}
				error_page   500 502 503 504  /50x.html;
				location = /50x.html {
					root   html;
				}
			}

			server {
				listen 8080;
				server_name localhost;
				root /nginx/htdocs;
				index index.html;
			}
		}


		第一次访问某可缓存资源时，在本地缓存中尚未有其对应的缓存对象，因此，其一定为未命中状态。而第二次请求时，则可以直接从本地缓存构建响应报文。
		# curl -I http://www.magedu.com/
		HTTP/1.1 200 OK
		Server: nginx/1.4.1
		Date: Tue, 14 May 2013 10:53:07 GMT
		Content-Type: text/html; charset=UTF-8
		Content-Length: 15
		Connection: keep-alive
		Last-Modified: Tue, 30 Apr 2013 09:34:09 GMT
		ETag: "186e9f-f-b4076640"
		Accept-Ranges: bytes
		X-Via: 172.16.100.107
		X-Cache-Status: MISS

		# curl -I http://www.magedu.com/
		HTTP/1.1 200 OK
		Server: nginx/1.4.1
		Date: Tue, 14 May 2013 10:53:09 GMT
		Content-Type: text/html; charset=UTF-8
		Content-Length: 15
		Connection: keep-alive
		Last-Modified: Tue, 30 Apr 2013 09:34:09 GMT
		ETag: "186e9f-f-b4076640"
		X-Via: 172.16.100.107
		X-Cache-Status: HIT
		Accept-Ranges: bytes

			

			
			
			
			
			



字典不能直接存储到文件.
PYC  #字节码文件
PY解释器声明
python运行原理 在python运行是会把.py文件交给生成一个字节码文件交给python虚拟机处理成机器能理解的二进制,机器去处理,逐行翻译解码.

使用模块import os    #执行系统命令模块也可以用from os import system 

import os #调用模块
from os import system,popen   #直接指明调用某模块的方法
from os import *   #not suggested 不建议,容易冲突.
import multiprocessing as multi    #给调用的模块用别名
导入second.py文件 import second
sys.path 查看PY环境路径  ''表示当前路径,多个重名的模块,优先调用先找到的.
sys.path.append(/home/sylar/) #将某个路径添加到环境变量.不会找子目录. 
/local/lib/python2.7/dist-packages   #第三方模块存放位置这个位置将多个文件放到一个目录,import目录名,就可以递归查找子目录的模块
所有的文件都是一个模块,所有的目录改造成一个包(包要递归查询,目录不会递归查询)
在所有目录下加一个touch __init__.py文件,就任务是一个包,就可以引递归用了
os.system("ipconfig") 


enumerate枚举,打印索引值
spilt #将字符串编程列表,用什么做区分
name ="alex,eric,jack"
name = name.split(",")



input 输入变量要先申明变量类型.输入字符串的时候要加引号(加引号是申明输入的是字符串),
#_*_coding:utf-8_*_  在py文件顶部中输入中文

字符串处理
S.find(substring, [start [,end]]) #可指范围查找子串，返回索引值，否则返回-1  
S.rfind(substring,[start [,end]]) #反向查找  
S.index(substring,[start [,end]]) #同find，只是找不到产生ValueError异常  
S.rindex(substring,[start [,end]])#同上反向查找  
S.count(substring,[start [,end]]) #返回找到子串的个数  
  
S.lowercase()  
S.capitalize()      #首字母大写  
S.lower()           #转小写  
S.upper()           #转大写  
S.swapcase()        #大小写互换  
  
S.split(str, ' ')   #将string转list，以空格切分  
S.join(list, ' ')   #将list转string，以空格连接  
  
s.repalce
处理字符串的内置函数  

len(str)                #串长度  
cmp("my friend", str)   #字符串比较。第一个大，返回1  
max('abcxyz')           #寻找字符串中最大的字符  
min('abcxyz')           #寻找字符串中最小的字符  


字典

D.get(key, 0)       #同dict[key]，多了个没有则返回缺省值，0。[]没有则抛异常  
D.has_key(key)      #有该键返回TRUE，否则FALSE  
D.keys()           	 #返回字典键的列表  
D.values()          #以列表的形式返回字典中的值，返回值的列表中可包含重复元素  
D.items()           #将所有的字典项以列表方式返回，这些列表中的每一项都来自于(键,值),但是项在返回时并没有特殊的顺序           
  
D.update(dict2)     #增加合并字典  
D.popitem()         #得到一个pair，并从字典中删除它。已空则抛异常  
D.clear()          	 #清空字典，同del dict  
D.copy()           	 #拷贝字典  
D.cmp(dict1,dict2)  #比较字典，(优先级为元素个数、键大小、键值大小)  
                    #第一个大返回1，小返回-1，一样返回0  
              
dictionary的复制  
dict1 = dict        #别名  
dict2=dict.copy()   #克隆，即另一个拷贝。

作业一用户输入12+3 -(20/4)*4 等类似公司后可输出结果,
实现加减乘除
满足优先级
作业2 员工信息表






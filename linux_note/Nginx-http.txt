www.nginx.org

web service:
	nginx:web server(static contentc), web reverse proxy(http反向代理,负载均衡),nginx自身有缓存能力,但只能缓存文件描述符 有缓存功能和缓存管理功能
	varnish CDN缓存
	squid CDN缓存
	varnish和squid相当于nginx和apache的关系
	haproxy
	keeplived
	ats:apache traffic server
	
	mogileFS 分布式文件系统 图片存储
	
	mongoDB 文档存储数据库
	
	Nginx: 轻量级,高并发,反向代理服务器,解决c10k 10000并发难题而生
	nginx与php结合时无法以模块方式运行.nginx与php联系必须工作于FPM模式 (既fastcgi模式)

	
	http protocol报文格式
	请求报文
	<method><url><version>
	<headers> 
	
	
	<body>
	
	响应报文
	<version> <status code> <reason phrase>
	<headers>
	
	
	<body>
		<method>: 请求方法， 希望服务器端执行的动作，如GET、HEAD、POST等
		<request-url>: 请求的资源，可以是相对路径，也是完整的URL
		<version>：协议版本，格式HTTP/<major>.<minor>，如http/1.0
		<headers>：HTTP首部
		<status>: 状态码
		<reason-phrase>：原因短语，数字状态码易读信息
		<entity-body>: 主体部分
	
	响应码
	1xx： 信息性状态码
	2xx：成功状态码
		200： OK
		201： Created
	3xx：重定向状态码
		301：Moved Permanently, 在响应报文中使用首部“Location: URL”指定资源现在所处的位置；永久重定向
		302：Found, 在响应报文中使用首部“Location: URL”指定临时资源位置；临时重定向
		304：Not Modified, 条件式请求中使用；
	4xx：客户端类的错误 
		403：Forbidden，请求被服务器拒绝
		404：Not Found，服务器无法找到请求的URL
		405：Method Not Allowed，不允许使用此方法请求相应的URL
	5xx：服务器类的错误
		500：Internal Server Error，服务器内部错误；
		502：Bad Gateway，代理服务器从上游收到了一条伪响应；
		503：Service Unavailable，服务器此时无法提供服务，但将来可能可用；
		
	HTTP请求方法：
		安全的方法：GET、HEAD
		POST
		PUT、DELETE、OPTIONS、TRACE、
		扩展方法：LOCK、MKCOL、COPY、MOVE
		GET：请求获取一个资源，需要服务器发送
		HEAD：跟GET相似，但其不需要服务发送资源而仅传回响应首部；
		POST：支持HTML表单提交，表单中有用户填入的数据，这些数据会发送到服务器端，由服务器存储至某位置（例如发送处理程序）
		PUT：与GET相反，向服务写入文档；例如发布系统
		DELETE：请求删除URL指向的资源
		OPTIONS：探测服务器端对某资源所支持的请求方法
		TRACE：跟踪请求要经过的防火墙、代理或网关等
		
	cache is king
	database-->动态--->静态  响应速度
	
	stateless:无状态特性:
		web page: 由web object组成(web对象,web资源) 包括CSS,图片,html文档
		1,每一个连接资源获取完成后就断开连接,使用tcp协议连接,都要进行3次握手,四次断开
			
		解决方案	keeplive:保持连接,tcp连接在获取资源后不断开.一般在时间(超时时长)和数量(获取资源上限)上进行限制
			优点:能够在同一个tcp通道上让用户持续获取资源,避免不必要的3次握手和四次断开,	缺点,在超时时长到期之前,在负载均衡时一个连接始终会被定向到同一个服务器,有时,一个空闲的保持连接的用户所占用的资源会影响后续用户的体验
		2,用户信息无法保存.断开后无法识别用户继续操作
		解决方案
		cookie:用户状态追踪.用户访问服务器后,服务器将一个cookie码记录用户访问信息发给用户,用户将连接信息cookie保存在客户端本地,后续操作会将cookie一起发给服务器,服务器将根据cookie来辨别用户.服务器会维持一个session来维持用户回话.
			session保持:
			session绑定:反均衡,session无高可用(单点故障),保持持久连接,将来之同一个IP的用户始终定向至同一个服务器,缺点节点当机,则丢失session
			session复制:将session发到各服务器,每一个会将会话多播至集群中的每一个机器,每个机器都维持当前集群的session用户可以调度至任一节点.缺点占用带宽大.内存占用大,
			服务器资源消耗过大,网络资源占用
			session服务器:memcache,redis(key-value,kv store),缺点服务器成为瓶颈.要做负载均衡.
			
				lvs session绑定:
				sh算法:基于源IP做绑定
				persistent connection:持久连接,基于源IP做绑定
				cookie均衡:做负载均衡时根据cookie进行负载均衡
		
	web I/O模型
	同步和异步
	阻塞和非阻塞
	
	同步阻塞:用户发起IO请求,一直在等待,不能阻塞
	同步非阻塞:用户发起IO,忙等,进程阻塞
	IO复用:阻塞在内核select(),poll(),最多只能监控1024,Apache的prefork模式就用的select所以只能保持1024个连接
	事件通知:阻塞,内核回调机制,由内核通知进程
	异步:有内核进行调度,并进行将数据从磁盘到内核,由内核到进程的操作,完成后通知进程
	MMAP:内存映射,数据由磁盘直接以页面形式映射到内存中,省去了数据到内核,内核到进程
	
	直接IO,进程直接访问磁盘数据,数据可靠性高,但是性能低
	
	处理并发用户请求(并发编程)
	单进程模型:串行方式响应,
	多进程模型:prefork,一个进程相应一个用户请求,并发使用多个进程实现,一个主进程,多个子进程
	多线程模型:worker,一个进程生成多个线程,一个线程响应一个用户请求,并发使用多个线程实现,n进程,n*m个线程
	事件模型:event,一个线程响应多个用户请求,基于事件驱动机制来维持多个用户请求.
	
	NGINX特性:
	基本功能:服务于静态资源的web服务器,能自动缓存打开的文件描述符.
	反向代理服务器:能缓存,负载均衡,后端服务器健康检测
	支持fastcgi:所以能够和PHP结合
	模块化机制:非DSO机制,不能动态装载,支持多种过滤器,gzip,ssi和图像大小调整,支持ssl
	
	扩展功能:
		基于名称和IP做虚拟主机
		支持keeplive
		支持平滑配置更新或程序版本升级
		支持定制访问日志,打开日志缓存功能以提供性能
		支持url rewrite 地址重写
		支持路径别名
		支持居于IP及用户认证
		支持速率限制,并发数限制
	
	nginx的基本架构
	一个master进程生成多个worker进程
	worker进程一般为cpu物理核心数,worker进程数一般小于物理核心数,避免(降低)进程切换,留一个核心用于系统进程.
	每个worker串联多个模块(例如过滤器,缓存管理器)工作
	基于事件驱动方式工作 ,epoll模型(kqueue,/dev/poll)
	支持sendfile:响应不返回进程,直接由内核返回给用户(网络IO)
	支持文件AIO:异步IO
	支持mmap
	nginx特性:非阻塞,事件驱动,一个master多个worker,一个worker响应多个用户请求
	单机理论响应10W,3-5W
	
	模块类别:wiki.nginx.org/Modules,没用安装的模块不能是用模块指令和参数
	核心模块core,
	标准http模块,默认会自动编译安装.
	可选HTTP模块,默认不会自动编译安装.
	邮件模块mail,
	第三方模块
	
	安装方法:
		编译安装
		rpm安装:epel,www.nginx.org
	
	Nginx的配置文件
		main:核心配置段,核心配置段也有使用模块化配置{}
		http{}http配置段
			配置参数需要以;分号结尾,#开头为注释.vim不支持配置文件语法高亮.语法格式
			参数名 值1[值2...];
			nginx的配置文件:变量模块内置变量,	用户自定义变量 set ar_name value
	Nginx基本配置的类别
		用于调试,定位问题
		正常运行的必备配置
		优化性能的配置
		事件类配置
	
	worker进程应该以普通用户身份运行:nginx用户,nginx组
		
		
		
		
		
	yum groupinstall -y "Development tools" "Server Platform Development"	
	yum install -y pcre-devel
		
	wget http://nginx-version.tar.gz
	tar zxf nginx-version.tar.gz 
	./configure --help  #查看安装参数
	./configure
	  --prefix=/usr \   #文件路径
	  --sbin-path=/usr/sbin/nginx \  #二进制程序
	  --conf-path=/etc/nginx/nginx.conf \   # 配置文件
	  --error-log-path=/var/log/nginx/error.log \  #错误日志
	  --http-log-path=/var/log/nginx/access.log \   #访问日志
	  --pid-path=/var/run/nginx/nginx.pid  \       #
	  --lock-path=/var/lock/nginx.lock \    #
	  --user=nginx \    #
	  --group=nginx \
	  --with-http_ssl_module \    # ssl
	  --with-http_flv_module \    # flv流媒体模块
	  --with-http_stub_status_module \   # 
	  --with-http_gzip_static_module \   #gzip 页面预压缩模块
	  --http-client-body-temp-path=/var/tmp/nginx/client/ \ #客户端请求包体临时目录,put或post方法中用户上传的文件
	  --http-proxy-temp-path=/var/tmp/nginx/proxy/ \    #做反向代理的时候,后端服务器的资源缓存
	  --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \   #转发fcgi的缓存
	  --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \     #反向代理的PYTHON开发的网站缓存
	  --http-scgi-temp-path=/var/tmp/nginx/scgi \       #scgi的缓存
	  --with-pcre      #                         
	  
	  ./configure |tee /usr/install.log #用tee命令保存安装日志到指定目录
	  make & make install
	  groupadd -r nginx
	  useradd -r nginx
	  mkdir 指定的文件目录
	  vim /etc/rc.d/init.d/nginx
	  
			#!/bin/sh
			#
			# nginx - this script starts and stops the nginx daemon
			#
			# chkconfig:   - 85 15 
			# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \
			#               proxy and IMAP/POP3 proxy server
			# processname: nginx
			# config:      /etc/nginx/nginx.conf
			# config:      /etc/sysconfig/nginx
			# pidfile:     /var/run/nginx.pid
			 
			# Source function library.
			. /etc/rc.d/init.d/functions
			 
			# Source networking configuration.
			. /etc/sysconfig/network
			 
			# Check that networking is up.
			[ "$NETWORKING" = "no" ] && exit 0
			 
			nginx="/usr/sbin/nginx"
			prog=$(basename $nginx)
			 
			NGINX_CONF_FILE="/etc/nginx/nginx.conf"
			 
			[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx
			 
			lockfile=/var/lock/subsys/nginx
			 
			make_dirs() {
			   # make required directories
			   user=`nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
			   options=`$nginx -V 2>&1 | grep 'configure arguments:'`
			   for opt in $options; do
				   if [ `echo $opt | grep '.*-temp-path'` ]; then
					   value=`echo $opt | cut -d "=" -f 2`
					   if [ ! -d "$value" ]; then
						   # echo "creating" $value
						   mkdir -p $value && chown -R $user $value
					   fi
				   fi
			   done
			}
			 
			start() {
				[ -x $nginx ] || exit 5
				[ -f $NGINX_CONF_FILE ] || exit 6
				make_dirs
				echo -n $"Starting $prog: "
				daemon $nginx -c $NGINX_CONF_FILE
				retval=$?
				echo
				[ $retval -eq 0 ] && touch $lockfile
				return $retval
			}
			 
			stop() {
				echo -n $"Stopping $prog: "
				killproc $prog -QUIT
				retval=$?
				echo
				[ $retval -eq 0 ] && rm -f $lockfile
				return $retval
			}
			 
			restart() {
				configtest || return $?
				stop
				sleep 1
				start
			}
			 
			reload() {
				configtest || return $?
				echo -n $"Reloading $prog: "
				killproc $nginx -HUP
				RETVAL=$?
				echo
			}
			 
			force_reload() {
				restart
			}
			 
			configtest() {
			  $nginx -t -c $NGINX_CONF_FILE
			}
			 
			rh_status() {
				status $prog
			}
			 
			rh_status_q() {
				rh_status >/dev/null 2>&1
			}
			 
			case "$1" in
				start)
					rh_status_q && exit 0
					$1
					;;
				stop)
					rh_status_q || exit 0
					$1
					;;
				restart|configtest)
					$1
					;;
				reload)
					rh_status_q || exit 7
					$1
					;;
				force-reload)
					force_reload
					;;
				status)
					rh_status
					;;
				condrestart|try-restart)
					rh_status_q || exit 0
						;;
				*)
					echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
					exit 2
			esac
	
	
	chmod +x /etc/rc.d/init.d/nginx
	chkconfig --add nginx
	vi nginx.conf
	下载nginx的vim工具
	nginx.vim  注意编辑nginx所在路径文件
	
二、配置Nginx
	正常运行的必备配置
		1,user username [groupname] 指定workers进程的用户属主属主,编译时可指定就不显示在文件中,在配置文件中修改后,以配置文件为准
		2,pid /path/to/pidfile_name 指定pid文件
		3,worker_rlimit_nofile #:指定nginx一个worker进程最多打开的文件句柄数10000
		4,worker_rlimit_sigpending #: 用户发给nginx进程的信号数量(信号队列的大小
	优化性能的配置
		1,worker_processes #:worker进程个数,CPU的物理核心数减1
		2,worker_cpu_affinity cpumask:绑定cpu,避免进程切换, 例如worker_cpu_affinity 00000001 00000010 00000100 00001000 ...8个CPU的绑定 并不能完全避免系统进程抢占CPU(此时要做CPU隔离)
		3,ssl_engine device:ssl硬件加速,使用ssl比http协议要慢5倍,在有ssl硬件加速器的服务器上指定ssl硬件加速设备
		4,time_resolution interval : 每次内核事件调用(epoll),返回时都会使用gettimeofday()来更新nginx缓存时钟, 用于定义每隔多长时间才会用geeimeofday()返回一次,x86_64系统上,gettimeofday()代价已经很小可以忽略.老的服务器可以设置
		5,worker_priority nice-number:nice-number -20,19之间的值
	事件相关的配置
		1,accept_mutex [on|off]:是否打开负载均衡锁,worker进程间的轮流的与新的客户端建立连接,而通常当一个worker进程的负载达到其上线的7/8,master就尽可能不在将请求调度到此worker
		2,lock_file /path/to/lockfile :accept_mutex的锁文件
		3,accept_mutex_delay #ms: 使用accept锁的延迟时间 一个worker进程为取得accept锁的等待时长,所以每个用户连接时也要等待:如果某worker进程在某次试图取得锁时失败了(其它worker进程已取得响应锁),至少要等待#ms才能再一次请求锁
		4,multi_accept on|off:是否允许一次性响应多个用户请求;比如进来20个请求是否允许一个worker请求去接受,默认OFF
		5,use [epoll|rtsig|select|poll]定义使用的事件模型 建议让nginx自动选择,linux上为epoll
		6,worker_connections #:定义每个worker能够并发响应最大连接数,worker_rlimit_nofile略大于worker_connections .如果是代理服务要乘以2,因为一个代理服务器要维持一个连接要2个文件句柄,一个客户端一个后端服务端
	用于调试,定位问题:只在调试nginx使用排错
		1,daemon [on|off]:是否让nginx运行于后台,默认on,改为off,使用所有信息输出控制台
		2,master_process on|off:是否关闭master进程,默认on,调试时设为off以方便追踪
		3,error_log /path/to/error_log level: 错误日志文件及其级别,调试时level使用debug级别,但要求编译时必须使用--with-debug启用debug功能 默认为error级别
		
	WEB服务的配置:必须使用虚拟主机来配置,每个虚拟主机使用一个server{}来配置,非虚拟主机的选项或公共配置需要定义在server{}之外
		http{
			directive value;
			...
			server{
			}
		}
		1,server{}:定义一个虚拟主机名:nginx支持使用基于主机名或IP的虚拟主机
		2,listen:监听地址 listen address:[port] 
			listen default_server:定义此server为http中默认的server,如果每一个任何一个listen使用此参数,那么第一个server即为默认server
			listen rcvbuf=SIZE:发送缓冲大小
			listen sndbuf=SIZE:接受缓冲大小
			listen ssl : https server
		3,server_name [...]:可以跟多个主机名,名称可以使用通配符和正则表达式(通常以~开头):当nginx收到一个请求是,会取出其首部的server值跟server_name进行比较,(1)先做精确匹配www.magedu.com (2)左侧通配符匹配,*.magedu.com(3)右侧通配匹配www.magedu.*(4)正则表达式匹配,~^.*\magedu\.com$
		4,server_name_hash_bucket_size 32|64|128: 为了实现快速主机查找,nginx使用hash来保存主机名
		5,location [ =|~|~*|^~] uri {...}:
		
		  location
		  
		  功能允许根据用户请求的URI来匹配指定的各location一进行访问配置:匹配到时将被location{}快种所处理;=:做精确匹配 ~:正则表达式模式匹配,匹配是区分字符大小写, ~*:忽略字符大小写, ^~:只需要前半部分与URI进行匹配,不检查正则表达式
		  匹配优先级:字符字面量最精确匹配--->正则表达式检索(由第一个匹配到)--->字符字面量
		文件路径定义:一般定义在location
		1,root path:设置web资源路径,用于请求的根文档目录.放在http中对所有生效,放在server中对虚拟主机生效,也可以放在location中可以做较精确匹配到
			例如		location / {
						root /www/htdoc
					}
					location ^~/images{
						root /web
					}
		使用中URL中/是root的路径, 返回root/URI
		2,alias path:只能用于location,定义别名
		3,index file: 定义主页文件
		4,error_page code ...[=[response]] uri:当对于某个请求返回错误时,如果匹配上了错误页面指定的code,则重定向到新的URI中.
		错误页面重定向: error_page 404 [=200] /404.html 此时错误代码会改为200
		5,try_files path1 [...] uri:尝试访问每个path,如果找到匹配的,就返回匹配到的.如果没有匹配到就返回uri的资源
		
	用于网络连接设置
		1,keeplive_timeout time:保持连接的超时时间 默认时间75秒
		2,keeplive_requessts #:在一次长连接上允许承载的最大请求数
		3,keeplive_disable: 对指定的浏览器禁止使用长连接
		4,tcp_nodelay on|off :对keeplive连接是否使用TCP_NODELAY选项.DELAY延迟发送,将多个确认的短报文,合并为一个报文延迟发送,默认on, 会影响keeplive性能所以一般为on
		5,client_header_timeout time: 读取http请求首部的超时时长,默认60秒.比较长,可以调低
		6,client-body_timeout time: 读取http请求包体的超时时长,默认60秒.比较长,可以调低
		7,send_timeout time:发送响应的超时时长
	对客户端请求的限制:
		1,limit_except method:只允许使用除了method以外的请求方法.指定对范围之外的其它方法的访问控制,只能用于location
			limit_except GET{
				allow 172.16.0.0/16;
				deny all;
			}
		GET以外的方法只能172.16.0.0/16这个地址可以访问
		2,client_max_body_size size: size限制http请求包体的最大值,常用于限定客户端所能够请求的最大包体.根据请求首部中的content-length来检测,以免无用的传输.
		3,limit_rate speed :限制客户端每秒钟传输的字节数,默认0,表示没有限制
		4,limit_rate_after time :nginx向客户端发送响应报文时,如果时长超出了此处指定的时长,则后续的发送过程开始限速.(多用于下载站,或下载较多场景)
	文件操作的优化
		1,sendfile on|off 是否启用sendfile功能
		2,aio on|off 是否启用aio推荐使用
		3,open_file_cache max=N [inactive=time]|off:是否打开文件缓存功能,max:缓存条目的最大值,当满了以后将根据LRU算法进行置换.inactive:某缓存条目在指定时长没有被访问过时,将自动被删除,默认是60s.一般要打开
		缓存信息:文件句柄,文件大小,上次修改时间,已经打开的目录结构,没有找到或没有访问权限的信息
		4,open_file_cache_errors on|off :是否缓存文件找不到或没有权限访问等信息
		5,open_file_cache_valid time: 多长时间检查一次缓存中的条目是否超出活动时长默认60s
		6,open_file_cache_min_use #:在inactive指定的时长内被访问超出指定的次数的缓存,才不会被删除,
	对客户端请求的特殊处理
		1,ignore_invalid_headers on|off: 是否忽略不合法的http首部,默认为on;off意味着请求首部中出现不合规的首部将拒绝响应,只能用于server和http
		2,log_not_found on|off:是否将文件找不到的信息也记录进错误日志中
		3,resolver address 指定nginx使用的dns服务器地址
		4,resolver_timeout time :dns解析超时时长默认30s
		5,server_tokens on|off:是否在错误页面中显示nginx的版本号
	http核心模块的内置变量:
		$uri: 当前请求的uri,不带参数;
		$request_uri:请求的uri,带完整参数
		$host:http请求报文中host首部,如果请求中没有host首部,则以处理此虚拟主机的主机名代替
		$hostname: nginx服务运行的当前主机名
		$remote_addr: 客户端IP
		$remote_port:客户端port
		$remote_user:使用用户认证是客户端用户输入的用户名
		$request-filename:用户请求中的URI经过本地root或alias转换后映射的本地的文件路径
		$request_method:请求方法，
		$server_addr:服务器ip
		$server_name:虚拟主机名
		$server_port:虚拟主机端口
		$server_protocol:服务器向客户端发送响应时的协议如http/1.1
		$scheme:在请求中使用的scheme,判断http还是https
		$http_HEADER:匹配请求报文中指定的HEADER ,$http_host匹配请求报文中的host首部
		$sent_http_HEADER: 匹配响应报文中指定的HEADER
		$document_root:当前请求映射到的root配置
		
	配置使用nginx
		1,访问控制模块deny,allow:至上而下匹配访问控制,以前一个策略为准
		deny 172.168.0.8
		allow 172.168.0.0/16
		deny all   #只允许172.168.0.0网段访问,除了172.168.0.8和其它所有IP都不能访问
		2,用户认证auth_basic 目录控制,设置密码(htpasswd软件生成密码文件)或者访问控制
			location /admin/ {
				auth_basic "admin area"; #密码提示信息
				auth_basic_user_file /etc/nginx/.htpasswd;   #密码文件

			}
		3,autoindex,建立下载站点使用,列出目录下的所有文件
			location /download/ {
				autoindex on|off;
			}
		4,brower,让不同浏览器访问不同页面
		5,charset,自动转换页面字符集
		6,limite requests,限制同一客户端请求数
		7,limit conn ,限制一个客户端的并发请求数
		8,logformat,定义访问日志格式
		9,referer,从那个页面跳转过来的.可以防盗链block有可能是用了代理
			(1)定义合规的引用valid_referers none | block |server_name |string(*ex)
			(2)拒绝不合规的引用
				if ($invalid_referer){
				rewrite 
				}
		10,rewrite 地址重写模块,类似重定向,做URL重写.比如原来图片存储与/image后来换到/tupian   或者是换域名本来是www.a.com换到www.b.com 可以查找替换指定URL.重写前,重写后都会检查,所以标志位来定义重写后的检查机制
				rewrite ^/images/(.*)$ /imgs/$1  将访问images路径下的访问都引用到imgs路径下, ^(开始)images/(.*)(任意文件)$(结束)   $1引用前面的(.*)
				标志位last 一旦当前规则重写之后,立即停止检查后续其它rewrite的规则,而通过重写后的规则重新请求,会死循环.
					  break  一旦当前规则重写之后,立即停止检查后续其它rewrite的规则,而后停止当前规则不发新的请求跳至其它nginx模块进行操作,需要pcre
					  redirect 返回302临时重定向
					  permanent 返回301永久重定向
					location /download/{
						rewrite ^(/download/.*)/media/(.*)\..*$ $1/media/$2.mp3 last;    #会一直修改.mp3  将last改为break
					}
				nginx最多循环10次,超出之后返回500错误 一般rewrite写在中时都是用break标志,或者将rewrite写在if上下文中
				rewrite ^/download/(.*\.(jpg|gif|jpeg|png))$ /images/$1 last 将所有download图片文件都替换到images路径
				
		11,rewrite_log on|off,是否把重写过程卸载错误日志中:默认为notice 不建议打开
			
		12,return code:用于结束rewrite规则,并且为客户返回状态码, 可以使用的状态码 204,400,402-406,500-504 状态码用户快速定位不同的rewrite用不同的状态码
		13, if (condition) {}	
				location ~*\.(jpg|gif|jpeg|png)$ {
					root /www/b.org/;
					valid_referers none blocked www.b.org *.b.org; 
					if ($invalid_referer){
						rewrite ^/ http://www.b.org/403.html;                #全站防图片盗链
					}
				}
	可选模块
		1,stub_status 状态信息模块
			location /server-status{
				stub_status on|off #开启
				access_log off;  #不记录到访问日志中
				allow someip;  #访问控制
				deny all;
			}
		2.gzip precompression 预压缩模块,对图片压缩没有意义,压缩比很小
				gzip on|off
				gzip_buffer 压缩的缓存
				gzip_disable 不使用压缩的浏览器
				gzip_min_length 最小压缩下限
				gzip_http_version 压缩后的传输协议
				gzip_proxied 代理服务器那一种报文不做压缩的代理
				gzip_comp_level # 压缩级别
				gzip_types  那些文件类型需要压缩
				
	内存及磁盘资源分配
		1,client_body_in_file_on on|clean|off :客户端请求包体是否缓存到本地磁盘,非off的配置都存到磁盘,即使包体大小为0,也会创建一个磁盘文件.请求结束后on不会删除,clean表示会删除,默认为off(上传服务器需要打开)
		2,client_body_in_single_buffer on|off :http的包体是否存储在内存的buffer中,默认off
		3,client_body_buffer_size size: 默认8k,nginx接受http包体的内存缓冲区大小
		4,client_body_temp_path dir-path [level1[level2[level3]]] :http包体存放的临时目录
		5,client_header_buffer_size size:正常情况下接受用户请求的http豹纹header部分时分配buffer大小,默认1k
		6,large_client_header_buffers number size: 存储超大http请求首部的内存buffer大小及个数.
		7,connection_pool_size size: 连接池初始大小,随着用户的增加,会逐渐增加 nginx对于每个建立成功的tcp连接都会预先分配一个内存池,此处用于设定此内存池的初始大小,默认256
		8,request_pool_size size: nginx在处理每个请求时会预先分配一个内存池,此处用于设定此内存池的初始大小默认4K
		


		
	  nginx 命令
		-h 帮助
		-s [stop停止,quit退出,reopen重启,reload重读配置文件] 用于平滑升级,不终断服务升级或重配置,响应完正在处理的请求,再重启进程
		-t 测试配置文件
	  
	  
	  
	  
		
		
	
